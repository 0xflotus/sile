#!@LUA@
SYSTEM_SILE_PATH = "@SILE_PATH@"
SYSTEM_SILE_LIB_PATH = "@SILE_LIB_PATH@"
SHARED_LIB_EXT = "@SHARED_LIB_EXT@"

local executable = debug.getinfo(1, "S").short_src
local luaversion = _VERSION:match("%d+%.%d+")

local extendPath = function (path)
  package.path  = path .. "/?.lua;" .. package.path
  package.path  = path .. "/?/init.lua;" .. package.path
  package.path  = path .. "/lua-libraries/?.lua;" .. package.path
  package.path  = path .. "/lua-libraries/?/init.lua;" .. package.path
  package.path  = path .. '/lua_modules/share/lua/' .. luaversion .. '/?.lua;' .. package.path
  package.path  = path .. '/lua_modules/share/lua/' .. luaversion .. '/?/init.lua;' .. package.path
  package.cpath = path .. '/lua_modules/lib/lua/' .. luaversion .. '/?.so;' .. package.cpath
  package.cpath = path .. "/?."..SHARED_LIB_EXT..";" .. package.cpath
  package.cpath = path .. "/core/?."..SHARED_LIB_EXT..";" .. package.cpath
end

extendPath(SYSTEM_SILE_PATH)
extendPath(SYSTEM_SILE_LIB_PATH)

local pathvar = os.getenv("SILE_PATH")
if pathvar then
  for path in string.gmatch(pathvar, "[^;]+") do
    if path:len() >= 1 and path ~= "./" then extendPath(path) end
  end
end

local cwd = executable:gsub("(.*/)(.*)", "%1")
if cwd ~= "./" then extendPath(cwd) end
extendPath(".")

-- Append the Lua runtime's default path
package.path = package.path .. ";;"

SILE = require("core/sile")
io.stdout:setvbuf 'no'
SILE.parseArguments()
if not os.getenv 'LUA_REPL_RLWRAP' then
  io.stderr:write('This is SILE '..SILE.version..'\n')
end
if SILE.makeDeps then SILE.makeDeps:add(executable) end
SILE.init()
if SILE.masterFilename then
  if SILE.preamble then
    for _, preamble in pairs(SILE.preamble) do
      io.stderr:write("Loading "..preamble)
      local c = SILE.resolveFile("classes/"..preamble)
      local f = SILE.resolveFile(preamble)
      if c then
        SILE.readFile(c)
      elseif f then
        SILE.readFile(f)
      else
        SILE.require("classes/"..preamble)
      end
    end
  end
  if SU.debugging("profile") and pcall(function () require("ProFi") end) then
    ProFi = require 'ProFi'
    ProFi:start()
  end
  main, err = xpcall(function() SILE.readFile(unparsed[1]) end, SILE.errorHandler)
  if not main then
    if type(err) == "string" and err:match(": interrupted!") then
      SILE.outputter:finish()
    else
      io.stderr:write("\nError detected:\n\t"..err.."\n")
    end
    os.exit(1)
  end
  SILE.finish()
  if SU.debugging("profile") and pcall(function () require("ProFi") end) then
    ProFi:stop()
    ProFi:writeReport( 'sile-profile.txt' )
  end
  if SU.debugging("versions") then SILE.shaper.debugVersions() end
else
  SILE.repl()
end
