LinkedList = function () {
	this.head = null;
	this.tail = null;
	this.listSize = 0;
}
LinkedList.Node = function (data) {
			this.prev = null;
			this.next = null;
			this.data = data;		
		};

LinkedList.prototype.size = function(){ return this.listSize; };
LinkedList.prototype.first = function(){ return this.head; };
LinkedList.prototype.isLinked = function(node) {
		return !((node && node.prev === null && node.next === null &&
        this.tail !== node && this.head !== node) || this.listSize == 0);
	};

LinkedList.prototype.forEach = function(fun) {
    var node = this.head;
    while (node !== null) {
        fun(node);
        node = node.next;
    }
}

LinkedList.prototype.insertAfter = function (node, newNode) {
			if (!this.isLinked(node)) { return this; }
			newNode.prev = node;
			newNode.next = node.next;
			if (node.next === null) {
				this.tail = newNode;
			} else {
				node.next.prev = newNode;
			}
			node.next = newNode;
			this.listSize += 1;
			return this;
		};


LinkedList.prototype.insertBefore = function (node, newNode) {
			if (!this.isLinked(node)) { return this; }
			newNode.prev = node.prev;
			newNode.next = node;
			if (node.prev === null) {
				this.head = newNode;
			} else {
				node.prev.next = newNode;
			}
			node.prev = newNode;
			this.listSize += 1;
			return this;
		};

LinkedList.prototype.push = function (node) {
			if (this.head === null) {
				this.unshift(node);
			} else {
				this.insertAfter(this.tail, node);
			}
			return this;
		};

LinkedList.prototype.unshift = function (node) {
			if (this.head === null) {
				this.head = node;
				this.tail = node;
				node.prev = null;
				node.next = null;
				this.listSize += 1;
			} else {
				this.insertBefore(this.head, node);
			}
			return this;
		};

LinkedList.prototype.remove = function (node) {
			if (!this.isLinked(node)) { return this; }
			if (node.prev === null) {
				this.head = node.next;
			} else {
				node.prev.next = node.next;
			}
			if (node.next === null) {
				this.tail = node.prev;
			} else {
				node.next.prev = node.prev;
			}
			this.listSize -= 1;
			return this;
		};
