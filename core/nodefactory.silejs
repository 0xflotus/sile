SILE.nodefactory = (function() {
  var _box = {height: 0, depth: 0, width: 0, stretch: 0, shrink: 0};

  var _hbox = object(_box); _hbox.type = "HBox";
  _hbox.toS = function() { return "H<"+this.width+">^"+this.height+"-"+this.depth+"v"; };
  _box.isBox = function () { return this.type === "HBox"; };
  _hbox.outputYourself = function(line) {
    if (this.value.glyph === 0) return;
    SILE.cairo.moveTo(SILE.typesetterState.cursorX, SILE.typesetterState.cursorY);
    SILE.cairo.showAGlyph(this.value.font, this.value.rawGlyph);
    SILE.typesetterState.cursorX += (this.width + line.ratio * (line.ratio < 0 ? this.shrink : this.stretch));
  };

  var _glue = object(_box); _glue.type = "Glue";
  _glue.toS = function() { return "G<"+this.stretch+"|"+this.width+"|"+this.shrink+">"; };
  _box.isGlue = function() { return this.type === "Glue"; };
  _glue.outputYourself = function(line) {
    SILE.typesetterState.cursorX += this.width + line.ratio * (line.ratio < 0 ? this.shrink : line.ratio > 0 ? this.stretch : 0);
  };

  var _vglue = object(_box); _vglue.type = "VGlue";
  _vglue.toS = function() { return "VG<"+this.stretch+"|"+this.height+"|"+this.shrink+">"; };
  _box.isVglue = function() { return this.type === "VGlue"; };
  _vglue.setGlue = function (adjustment) {
    this.height = this.height + adjustment;
    this.stretch = 0;
  };

  var _penalty = object(_box); _penalty.type = "Penalty"; _penalty.flagged = 0; _penalty.penalty = 0;
  _penalty.toS = function() { return "P("+this.penalty+(this.flagged ? "!":"")+")"; };
  _penalty.outputYourself = function() {};
  _box.isPenalty = function() { return this.type === "Penalty" };

    var _vbox = object(_box); _vbox.type = "VBox";
  _box.isVbox = function () { return this.type === "VBox" };
    _vbox.toS = function() { return "VB["+this.toText()+"]"; }
    _vbox.toText = function() {return this.nodes.map(function(v) { return v.value ? String.fromCharCode(v.value.glyph+32) : " " }).join(""); }
  _hbox.value = {};
  _vbox.nodes = [];
  _vbox.ratio = 0;

  var _new_and_spec = function (proto, spec) {
    var o = object(proto);
    for (e in proto) { if (spec[e]) o[e] = spec[e] }
    return o;
  };

  return {
    newHbox: function(spec) { return _new_and_spec(_hbox, spec) },
    newVbox: function(spec) {
      var vbox = _new_and_spec(_vbox, spec);
      // Compute the dimensions
      // console.log(vbox.nodes.map(function (x) { return x.toS() }).join(""));
      vbox.depth = vbox.nodes.select(function(n) { return n.isBox() }).max( function (n) { return n.depth });
      vbox.height = vbox.nodes.select(function(n) { return n.isBox() }).max( function (n) { return n.height });
      // console.log("VBOX H"+vbox.height+" D"+vbox.depth);
      return vbox;
    },
    newGlue: function(spec) { return _new_and_spec(_glue, spec) },
    newVglue: function(spec) { return _new_and_spec(_vglue, spec) },
    newPenalty: function(spec) { return _new_and_spec(_penalty, spec) },
    pushHbox: function (spec) { return SILE.typesetterState.nodes.push(this.newHbox(spec)); },
    pushGlue: function (spec) { return SILE.typesetterState.nodes.push(this.newGlue(spec)); },
    pushPenalty: function (spec) {  return SILE.typesetterState.nodes.push(this.newPenalty(spec)); },
    pushVbox: function (spec) { var x;SILE.typesetterState.outputQueue.push(x = this.newVbox(spec)); return x; },
    pushVglue: function (spec) { return SILE.typesetterState.outputQueue.push(this.newVglue(spec)); },
    pushVpenalty: function (spec) { return SILE.typesetterState.outputQueue.push(this.newPenalty(spec)); },

  };
})();
