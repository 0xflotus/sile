(function() { 
    var framePrototype = {
        "top": function() { 
            if (typeof this._top == "function" ) { return this._top() };
            return this._top;
        },
        "left": function() {
            if (typeof this._left == "function" ) { return this._left() };
            return this._left;
        },
        "right": function() {
            if (typeof this._right == "function" ) { return this._right() };
            if (!this._right && this._width) {
                return this.left() + this.width();
            }
            return this._right;
        },
        "bottom": function() {
            if (typeof this._bottom == "function" ) { return this._bottom() };
            if (!this._bottom && this._height) {
                return this.top() + this.height();
            }
            return this._bottom;
        },
        "width": function() {
            if (typeof this._width == "function" ) { return this._width() };
            if (!this._width) { return this.right() - this.left(); }
            return this._width;
        },
        "height": function() {
            if (typeof this._height == "function" ) { return this._height() };
            if (this._height) { return this._height; }
            if (this.bottom() && this.top()) { return this.bottom() - this.top(); }
            return Infinity;
        },
        next: null,
        id: null,
        previous: null,
        balanced: 0
    };
    SILE.newFrame = function(spec) {
        var frame = object(framePrototype);
        ["top", "bottom", "height"].forEach(function(x) {
            if (!spec[x]) return;
            if (typeof spec[x] != "function") { 
                var old = spec[x];
                // Defer relative calculations until page size is known
                if (old.match(/%/)) { spec[x] = function() { return SILE.toPoints(old,"%", "h") } }
                else { spec[x] = SILE.toPoints(spec[x]) };
            }
            frame["_"+x] = spec[x];
        });
        ["left", "right", "width" ].forEach(function(x) {
            if (!spec[x]) return;
            if (typeof spec[x] != "function") { 
                var old = spec[x];
                // Defer relative calculations until page size is known
                if (old.match(/%/)) { spec[x] = function() { return SILE.toPoints(old,"%","w") } }
                else { spec[x] = SILE.toPoints(spec[x]) };
            }
            frame["_"+x] = spec[x];
        });
        frame.id = spec.id;
        frame.next = spec.next;
        return frame;
    };
})();

SILE.getFrame = function(id) {return SILE.documentState.thisPageTemplate.frames[id]; };
SILE.parseComplexFrameDimension = function(d, width_or_height) {
    console.log(d);
    if (!d.match(/[\+\(\)]/)) {
        var p = SILE.toPoints(d, null, width_or_height);
        return p;
    }
    console.error(d);
    exit();
}