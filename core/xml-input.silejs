(function() {
var libxmljs = require('libxmljs');
var fs = require('fs');
var data;
try {
  data = fs.readFileSync(SILE.file, "utf8");
}
catch (err) {
  console.error("There was an error opening the file:");
  console.log(err);
  process.exit(1);
}
var xml = libxmljs.parseXmlString(data);
var rClass = xml.root().attr("class");
var documentClass = rClass ? rClass.value() : "plain";
var klass = SILE.require("class/"+documentClass).class;
xml.root().attrs().forEach(function(x) {
    if (x.name() == "class") return;
    if (klass.options[x.name()])
        klass.options[x.name()].call(klass,x.value());
});

SILE.documentState.documentClass = klass;

var firstFrame = klass.init();

SILE.typesetter.init(firstFrame);
SILE.process = function(node) {
    var name = node.name();
    if (node.type() === "text" || !node.name()) {
        SILE.typesetter.typeset(node.text());
        node.childNodes().forEach(SILE.process);
    } else if (SILE.Commands[name]) {
        SILE.Commands[name](node);
    } else {
        SILE.error("Unknown command "+name);
    }
};

SILE.include = function (file) {
  try {
    data = fs.readFileSync(file, "utf8"); // XXX Search paths
  }
  catch (err) {
    console.error("There was an error opening the file:");
    console.log(err);
    process.exit(1);
  }
  var xml = libxmljs.parseXmlString(data);
  xml.root().childNodes().forEach(SILE.process);
}

xml.root().childNodes().forEach(SILE.process);
klass.end();

})();

