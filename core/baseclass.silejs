SILE.baseClass = (function() { 
    function registerCommands() { 
        SILE.Commands.textit = function(){} // XXX hack
        SILE.registerCommand("font", function(n) {
            var o = SILE.state;
            SILE.state = object( SILE.state );
            if (n.attr("family")) {
                SILE.state.fontFamily = n.attr("family").value();
            }
            if (n.attr("size")) {
                SILE.state.fontSize = n.attr("size").value();
            }
            n.childNodes().forEach(SILE.process);
            o.nodes = SILE.state.nodes;
            SILE.state = o;
        });
        SILE.registerCommand("penalty", function(n) {
            SILE.nodefactory.pushPenalty({ 
                flagged: n.attr("flagged") ? n.attr("flagged").value() : 0,
                penalty: n.attr("penalty") ? eval(n.attr("penalty").value()) : 0
            });
        });
        SILE.registerCommand("glue", function(n) {
            SILE.nodefactory.pushGlue({ 
                width: n.attr("width") ? n.attr("width").value() : 0,
                stretch: n.attr("stretch") ? eval(n.attr("stretch").value()) : 0,
                shrink: n.attr("shrink") ? eval(n.attr("shrink").value()) : 0
            });
        });

    }
    
    return {
    settings: {
        widowPenalty: 150,
        clubPenalty: 150
    },
    pageTemplate: { Frames: [ ] },
    state: { parindent: 11 },
    init: function() { 
        SILE.outputter.init(this); 
        registerCommands();
        SILE.state.fontFamily = "Gentium";
        SILE.state.fontSize = 11;
        SILE.ThisPage = this.pageTemplate;
        SILE.baseClass.initFrame(this.pageTemplate.Frames[0]);
    },
    initFrame: function(f) {
        SILE.state.currentFrame = f;
        SILE.state.cursorX = SILE.state.currentFrame.left();
        SILE.state.cursorY = SILE.state.currentFrame.top();
        console.log("Current frame is "+f);
    },
    newPage: function() {
        SILE.outputter.newPage();
        // Copy default layout to SILE.ThisPage
        SILE.ThisPage = this.pageTemplate;
        SILE.baseClass.initFrame(this.pageTemplate.Frames[0]);
    },
    endPage: function() {
        SILE._internals.leaveHmode();
    },
    end: function() {
        this.endPage();
        SILE.shipOut(0);
        SILE.outputter.finish()
    },
    newPar: function() {
        SILE.nodefactory.pushGlue({ width: SILE.state.documentClass.state.parindent, stretch: 0, shrink: 0});
    },
    options: { 
        papersize: function(size) { 
            if(size.match(/\s+x\s+/)) {
                var direct = size.split(/\s+x\s+/);
                SILE.state.paperSize = direct.map(function (x) { return SILE.toPoints(x) });
            } else if (SILE.paperSizes[size]) {
                SILE.state.paperSize = SILE.paperSizes[size];
            } else {
                SILE.error("Unknown paper size "+size);
            }
        }
    }
    };
    })();
