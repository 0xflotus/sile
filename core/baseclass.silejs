SILE.baseClass = (function() { 
    var registerCommands = function() { 
        SILE.Commands.textit = function(){} // XXX hack
        var commandStack = [];
        SILE.registerCommand("define", function (n) {
            var cmd = n.attr("command").value();
            SILE.registerCommand(cmd, function(nodes) {
                var o = SILE.documentState;
                SILE.documentState = object( o );
                commandStack.push(nodes.childNodes());
                n.childNodes().forEach(SILE.process);
                SILE.Commands.process = null;
                SILE.documentState = o;
            });
        });

        SILE.registerCommand("comment", function() {});
        SILE.registerCommand("process", function() { 
            commandStack.pop().forEach(SILE.process); 
        });

        SILE.registerCommand("script", function(n) { 
            var file = n.attr("src");
            if (file && file.value()) {
                // XXX
            } else {
                eval(n.text());
            }
        });

        SILE.registerCommand("pagetemplate", function (n) {
            SILE.documentState.thisPageTemplate = { frames: {} };
            n.childNodes().forEach(SILE.process);
            SILE.documentState.thisPageTemplate.firstContentFrame = SILE.getFrame(n.attr("firstContentFrame").value());
            SILE.baseClass.initFrame(SILE.documentState.thisPageTemplate.firstContentFrame);
            //console.log(SILE.documentState.thisPageTemplate);
        });
        SILE.registerCommand("frame", function (n) {
            var id = n.attr("id").value();
            var spec = {
                id: id,
                next: (n.attr("next") ? n.attr("next").value() : null),
                balanced: n.attr("balanced") ? parseInt(n.attr("balanced").value() || 0) : 0,
            };
            ["top", "left", "bottom", "right", "width", "height"].forEach(function(dim) {
                var which = dim.match(/^(top|bottom|height)$/) ? "h" : "w";
                var val = n.attr(dim);
                if (!val) return
                val = val.value();
                if (!val) return;
                spec[dim] = function() { return SILE.parseComplexFrameDimension(val, which); };
            });
            SILE.documentState.thisPageTemplate.frames[id] = SILE.newFrame(spec);
        });

        SILE.registerCommand("font", function(n) {
            var o = SILE.documentState;
            SILE.documentState = object( o );
            if (n.attr("family")) {SILE.documentState.fontFamily = n.attr("family").value(); }
            if (n.attr("size")) {SILE.documentState.fontSize = n.attr("size").value(); }
            if (n.attr("weight")) {SILE.documentState.fontWeight = n.attr("weight").value(); }
            n.childNodes().forEach(SILE.process);
            SILE.documentState = o;
        });
        SILE.registerCommand("penalty", function(n) {
            SILE.nodefactory.pushPenalty({ 
                flagged: n.attr("flagged") ? n.attr("flagged").value() : 0,
                penalty: n.attr("penalty") ? eval(n.attr("penalty").value()) : 0
            });
        });
        SILE.registerCommand("glue", function(n) {
            SILE.nodefactory.pushGlue({ 
                width: n.attr("width") ? SILE.toPoints(n.attr("width").value()) : 0,
                stretch: n.attr("stretch") ? SILE.toPoints(n.attr("stretch").value()) : 0,
                shrink: n.attr("shrink") ? SILE.toPoints(n.attr("shrink").value()) : 0
            });
        });
        SILE.registerCommand("skip", function(n) {
            SILE._internals.leaveHmode();
            SILE.nodefactory.pushVglue({
                height: n.attr("height") ? SILE.toPoints(n.attr("height").value()) : 0,
                stretch: n.attr("stretch") ? SILE.toPoints(n.attr("stretch").value()) : 0,
                shrink: n.attr("shrink") ? SILE.toPoints(n.attr("shrink").value()) : 0
            });
        });

    }
    
    return {
    settings: {
        widowPenalty: 5000,
        clubPenalty: 5000
    },
    pageTemplate: { frames: [ ], firstContentFrame: null },
    state: { parindent: 11,
        baselineSkip: SILE.nodefactory.newVglue({ height: 13, stretch: 2, shrink: 0}),
    },
    init: function() { 
        SILE.outputter.init(this); 
        registerCommands();
        SILE.documentState.fontFamily = "Adobe Garamond Pro";
        SILE.documentState.fontSize = 11;
        SILE.documentState.fontWeight = 200;
        this.loadInitialFrame();
    },
    loadInitialFrame: function() {
        SILE.documentState.thisPageTemplate = this.pageTemplate;
        this.initFrame(SILE.documentState.thisPageTemplate.firstContentFrame);
    },
    initFrame: function(f) {
        SILE.typesetterState.currentFrame = f;
        SILE.typesetterState.cursorX = SILE.typesetterState.currentFrame.left();
        SILE.typesetterState.cursorY = SILE.typesetterState.currentFrame.top();
        SILE.typesetterState.frameTotals = { height: 0, prevDepth: 0 };
        //SILE.outputter.debugFrame(f);
    },
    newPage: function() {
        SILE.outputter.newPage();
        this.loadInitialFrame();
        // Any other output-routiney things will be done here by inheritors
    },
    endPage: function() {
        SILE._internals.leaveHmode();
        // Any other output-routiney things will be done here by inheritors
    },
    end: function() {
        this.endPage();
        SILE.shipOut(0);
        SILE.outputter.finish()
    },
    newPar: function() {
        SILE.nodefactory.pushGlue({ width: SILE.documentState.documentClass.state.parindent, stretch: 0, shrink: 0});
    },
    options: { 
        papersize: function(size) { 
            if(size.match(/\s+x\s+/)) {
                var direct = size.split(/\s+x\s+/);
                SILE.documentState.paperSize = direct.map(function (x) { return SILE.toPoints(x) });
            } else if (SILE.paperSizes[size]) {
                SILE.documentState.paperSize = SILE.paperSizes[size];
            } else {
                SILE.error("Unknown paper size "+size);
            }
        }
    }
    };
    })();
